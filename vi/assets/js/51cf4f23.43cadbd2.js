"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},69241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r,i=t(87462),a=t(63366),o=(t(67294),t(3905)),s=["components"],l={sidebar_label:"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158"},c="NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158",p={unversionedId:"tutorials/indexer/migrating-to-near-lake-framework",id:"tutorials/indexer/migrating-to-near-lake-framework",title:"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158",description:"NEAR \uc778\ub371\uc11c \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uaf2d \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud558\ub294 \uc774\uc720\uac00 \uc5c6\ub294 \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\ub294 NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c\uc758 \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc744 \uace0\ub824\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.",source:"@site/../docs/3.tutorials/indexer/migrating-to-near-lake-framework.md",sourceDirName:"3.tutorials/indexer",slug:"/tutorials/indexer/migrating-to-near-lake-framework",permalink:"/near_docs/vi/tutorials/indexer/migrating-to-near-lake-framework",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/indexer/migrating-to-near-lake-framework.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1678337636,formattedLastUpdatedAt:"9 thg 3, 2023",frontMatter:{sidebar_label:"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158"},sidebar:"\uac1c\ubc1c",previous:{title:"\ube14\ub85d\uccb4\uc778 \ub370\uc774\ud130 \ucffc\ub9ac",permalink:"/near_docs/vi/tools/indexer-for-explorer"},next:{title:"NEAR CLI",permalink:"/near_docs/vi/tools/near-cli"}},m={},d=[{value:"\uc758\uc874\uc131(Dependency) \ubcc0\uacbd",id:"\uc758\uc874\uc131dependency-\ubcc0\uacbd",level:2},{value:"clap config \ubcc0\uacbd",id:"clap-config-\ubcc0\uacbd",level:2},{value:"\uc778\ub371\uc11c \uc778\uc2a4\ud134\uc2a4 \uad50\uccb4",id:"\uc778\ub371\uc11c-\uc778\uc2a4\ud134\uc2a4-\uad50\uccb4",level:2},{value:"\uc218\uc815 \uc804 Import",id:"\uc218\uc815-\uc804-import",level:3},{value:"\uc218\uc815 \ud6c4 Import",id:"\uc218\uc815-\ud6c4-import",level:3},{value:"<code>main()</code> \uc0dd\uc131",id:"main-\uc0dd\uc131",level:3},{value:"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c \uc2a4\ud2b8\ub9bc \ubc0f \ucd5c\uc885 main \ud568\uc218",id:"near-lake-\ud504\ub808\uc784\uc6cc\ud06c-\uc2a4\ud2b8\ub9bc-\ubc0f-\ucd5c\uc885-main-\ud568\uc218",level:3},{value:"\uc790\ub8cc\ud615 \uad00\ub828 \ud568\uc218 \ub0b4 \ubcc0\uacbd \uc0ac\ud56d",id:"\uc790\ub8cc\ud615-\uad00\ub828-\ud568\uc218-\ub0b4-\ubcc0\uacbd-\uc0ac\ud56d",level:2},{value:"<code>listen_blocks</code>",id:"listen_blocks",level:3},{value:"<code>is_tx_receiver_watched()</code>",id:"is_tx_receiver_watched",level:2},{value:"\uc790\uaca9 \uc99d\uba85",id:"\uc790\uaca9-\uc99d\uba85",level:2},{value:"\uacb0\ub860",id:"\uacb0\ub860",level:2},{value:"Diffs",id:"diffs",level:2}],u=(r="ProgrammingLanguage",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),g={toc:d};function f(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"near-lake-\ud504\ub808\uc784\uc6cc\ud06c\ub85c-\ub9c8\uc774\uadf8\ub808\uc774\uc158"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158"),(0,o.kt)(u,{lang:"rust",mdxType:"ProgrammingLanguage"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-indexer-framework"},"NEAR \uc778\ub371\uc11c \ud504\ub808\uc784\uc6cc\ud06c"),"\ub97c \uaf2d \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud558\ub294 \uc774\uc720\uac00 \uc5c6\ub294 \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\ub294 ",(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-lake-framework"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c"),"\ub85c\uc758 \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc744 \uace0\ub824\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c\ub294 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/near-examples/indexer-tx-watcher-example"},"indexer-tx-watcher-example"),"\uc744 \uc1fc\ucf00\uc774\uc2a4\ub85c \uc0ac\uc6a9\ud558\uc5ec \ud504\ub85c\uc81d\ud2b8\ub97c \ub9c8\uc774\uadf8\ub808\uc774\uc158\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4."),(0,o.kt)("admonition",{title:"\uc18c\uc2a4 \ucf54\ub4dc",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"\ub9c8\uc774\uadf8\ub808\uc774\uc158\ub41c \uc778\ub371\uc11c\uc758 \uc18c\uc2a4 \ucf54\ub4dc\ub294 GitHub ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/near-examples/indexer-tx-watcher-example-lake/tree/0.4.0%EC%97%90%EC%84%9C"},"https://github.com/near-examples/indexer-tx-watcher-example-lake/tree/0.4.0\uc5d0\uc11c")," \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")),(0,o.kt)("admonition",{title:"Diffs",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"\ubb38\uc11c \ub05d \ubd80\ubd84\uc5d0 \ucc38\uc870\uc6a9\uc73c\ub85c ",(0,o.kt)("a",{parentName:"p",href:"#diffs"},"diff\ub97c \uac8c\uc2dc\ud588\uc2b5\ub2c8\ub2e4"),". \uc778\ub371\uc11c\ub97c \ub9c8\uc774\uadf8\ub808\uc774\uc158\ud558\uae30 \uc704\ud574 diff\ub9cc \ud544\uc694\ud55c \uacbd\uc6b0, \uc544\ub798\ub85c \uc2a4\ud06c\ub864\ud558\uc5ec \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")),(0,o.kt)("h2",{id:"\uc758\uc874\uc131dependency-\ubcc0\uacbd"},"\uc758\uc874\uc131(Dependency) \ubcc0\uacbd"),(0,o.kt)("p",null,"\uc6b0\uc120 ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," \ub0b4 \uc758\uc874\uc131\ubd80\ud130 \uc2dc\uc791\ud574\ubd05\uc2dc\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:"title=src/Cargo.toml",title:"src/Cargo.toml"},'\n[package]\nname = "indexer-tx-watcher-example"\nversion = "0.1.0"\nauthors = ["Near Inc <hello@nearprotocol.com>"]\nedition = "2018"\n\n[dependencies]\nactix = "=0.11.0-beta.2"\nactix-rt = "=2.2.0"  # remove it once actix is upgraded to 0.11+\nbase64 = "0.11"\nclap = "3.0.0-beta.1"\nopenssl-probe = { version = "0.1.2" }\nserde = { version = "1", features = ["derive"] }\nserde_json = "1.0.55"\ntokio = { version = "1.1", features = ["sync"] }\ntracing = "0.1.13"\ntracing-subscriber = "0.2.4"\n\nnear-indexer = { git = "https://github.com/near/nearcore", rev = "25b000ae4dd9fe784695d07a3f2e99d82a6f10bd" }\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edition"),"\uc744 ",(0,o.kt)("inlineCode",{parentName:"li"},"2021"),"\ub85c \uc5c5\ub370\uc774\ud2b8"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"actix")," \ud06c\ub808\uc774\ud2b8 \uc0ad\uc81c"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"openssl-probe")," \ud06c\ub808\uc774\ud2b8 \uc0ad\uc81c"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"itertools")," \ubc0f ",(0,o.kt)("inlineCode",{parentName:"li"},"futures")," \ucd94\uac00 "),(0,o.kt)("li",{parentName:"ul"},"tokio \ub7f0\ud0c0\uc784\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c, ",(0,o.kt)("inlineCode",{parentName:"li"},"tokio")," \uae30\ub2a5 \ucd94\uac00"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tokio-stream")," \ud06c\ub808\uc774\ud2b8 \ucd94\uac00"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"near-indexer"),"\ub97c ",(0,o.kt)("inlineCode",{parentName:"li"},"near-lake-framework"),"\ub85c \uad50\uccb4")),(0,o.kt)("p",null,"\uacb0\uad6d \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\ud0dc\uac00 \ub420 \uac83\uc785\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:"title=src/Cargo.toml",title:"src/Cargo.toml"},'[package]\nname = "indexer-tx-watcher-example"\nversion = "0.1.0"\nauthors = ["Near Inc <hello@nearprotocol.com>"]\nedition = "2021"\n\n[dependencies]\nbase64 = "0.11"\nclap = { version = "3.1.6", features = ["derive"] }\nfutures = "0.3.5"\nserde = { version = "1", features = ["derive"] }\nserde_json = "1.0.55"\nitertools = "0.9.0"\ntokio = { version = "1.1", features = ["sync", "time", "macros", "rt-multi-thread"] }\ntokio-stream = { version = "0.1" }\ntracing = "0.1.13"\ntracing-subscriber = "0.2.4"\n\nnear-lake-framework = "0.4.0"\n\n')),(0,o.kt)("h2",{id:"clap-config-\ubcc0\uacbd"},"clap config \ubcc0\uacbd"),(0,o.kt)("p",null,"\ud604\uc7ac \uc6b0\ub9ac\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," \ubc0f ",(0,o.kt)("inlineCode",{parentName:"p"},"Init")," \uba85\ub839\uc744 \ud3ec\ud568\ud55c \ud558\uc704 \uba85\ub839\uc774 \uc788\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"Opts")," \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. ",(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-lake-framework"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c"),"\uc5d0\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"\uc640 \uad6c\uc131(config) \ud30c\uc77c\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, ",(0,o.kt)("inlineCode",{parentName:"p"},"Init")," \uc5ed\uc2dc \uc804\ud600 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc77c\ubd80 \uad6c\uc870\ub97c ",(0,o.kt)("inlineCode",{parentName:"p"},"Opts"),"\ub85c \ud569\uccd0\uc57c \ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},'...\n/// NEAR Indexer Example\n/// Watches for stream of blocks from the chain\n#[derive(Clap, Debug)]\n#[clap(version = "0.1", author = "Near Inc. <hello@nearprotocol.com>")]\npub(crate) struct Opts {\n    /// Sets a custom config dir. Defaults to ~/.near/\n    #[clap(short, long)]\n    pub home_dir: Option<std::path::PathBuf>,\n    #[clap(subcommand)]\n    pub subcmd: SubCommand,\n}\n\n#[derive(Clap, Debug)]\npub(crate) enum SubCommand {\n    /// Run NEAR Indexer Example. Start observe the network\n    Run(RunArgs),\n    /// Initialize necessary configs\n    Init(InitConfigArgs),\n}\n\n#[derive(Clap, Debug)]\npub(crate) struct RunArgs {\n    /// account ids to watch for\n    #[clap(long)]\n    pub accounts: String,\n}\n\n#[derive(Clap, Debug)]\npub(crate) struct InitConfigArgs {\n    ...\n}\n...\n')),(0,o.kt)("p",null,"\ud560 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InitConfigArgs"),"\ub97c \uc644\uc804\ud788 \uc0ad\uc81c"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"RunArgs"),"\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"li"},"Opts"),"\ub85c \ub0b4\uc6a9\ubb3c\uc744 \uc644\uc804\ud788 \uc62e\uae34 \ub4a4, ",(0,o.kt)("inlineCode",{parentName:"li"},"RunArgs")," \uc0ad\uc81c"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Opts"),"\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"li"},"home_dir")," \uc0ad\uc81c"),(0,o.kt)("li",{parentName:"ul"},"\uc778\ub371\uc2f1\uc744 \uc2dc\uc791\ud560 \ube14\ub85d \ub192\uc774\ub97c \uc54c\uae30 \uc704\ud574, ",(0,o.kt)("inlineCode",{parentName:"li"},"Opts"),"\uc5d0 ",(0,o.kt)("inlineCode",{parentName:"li"},"block_height")," \ucd94\uac00"),(0,o.kt)("li",{parentName:"ul"},"\ubcc0\uc218\uc5d0 \ub300\ud55c ",(0,o.kt)("inlineCode",{parentName:"li"},"SubCommand")," \ub9ac\ud329\ud130\ub9c1 : \uc778\ub371\uc2f1\ud560 \uccb4\uc778\uc744 \uc815\uc758\ud558\uae30 \uc704\ud55c \uba54\uc778\ub137 \ubc0f \ud14c\uc2a4\ud2b8\ub137"),(0,o.kt)("li",{parentName:"ul"},"\ub098\uc911\uc744 \uc704\ud574 \uad6c\uc870\uccb4\uc5d0 ",(0,o.kt)("inlineCode",{parentName:"li"},"Clone")," \ucd94\uac00")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},'/// NEAR Indexer Example\n/// Watches for stream of blocks from the chain\n#[derive(Clap, Debug, Clone)]\n#[clap(version = "0.1", author = "Near Inc. <hello@nearprotocol.com>")]\npub(crate) struct Opts {\n    /// block height to start indexing from\n    #[clap(long)]\n    pub block_height: u64,\n    /// account ids to watch for\n    #[clap(long)]\n    pub accounts: String,\n    #[clap(subcommand)]\n    pub subcmd: SubCommand,\n}\n\n#[derive(Clap, Debug, Clone)]\npub(crate) enum SubCommand {\n    Mainnet,\n    Testnet,\n}\n')),(0,o.kt)("p",null,"\ud30c\uc77c \ub05d \ubd80\ubd84\uc5d0 \uad50\uccb4\ud574\uc57c \ud560 \uad6c\ud604 \uc0ac\ud56d\uc774 \ud558\ub098 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},"...\nimpl From<InitConfigArgs> for near_indexer::InitConfigArgs {\n    ...\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"near_lake_framework::LakeConfig"),"\uc5d0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Opts"),"\ub97c \uce90\uc2a4\ud305\ud560 \uc218 \uc788\uae30\ub97c \ubc14\ub77c\uae30 \ub54c\ubb38\uc5d0, \uc544\ub798\uc640 \uac19\uc774 \uc0c8\ub86d\uac8c \uad6c\ud604\ud560 \uac83\uc785\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},'impl From<Opts> for near_lake_framework::LakeConfig {\n    fn from(opts: Opts) -> Self {\n        let mut lake_config =\n            near_lake_framework::LakeConfigBuilder::default().start_block_height(opts.block_height);\n\n        match &opts.subcmd {\n            SubCommand::Mainnet => {\n                lake_config = lake_config.mainnet();\n            }\n            SubCommand::Testnet => {\n                lake_config = lake_config.testnet();\n            }\n        };\n\n        lake_config.build().expect("Failed to build LakeConfig")\n    }\n}\n')),(0,o.kt)("p",null,"\ub9c8\uc9c0\ub9c9 \uc870\uce58\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"init_logging"),"\uc744 \ubcc0\uacbd\ud558\uc5ec, \uc911\ubcf5 \ub85c\uadf8 \uad6c\ub3c5\uc744 \uc81c\uac70\ud558\ub294 \uc81c\uac70\ud558\ub294 \uac83\uc785\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},'\n...\npub(crate) fn init_logging() {\n    let env_filter = EnvFilter::new(\n        "tokio_reactor=info,near=info,stats=info,telemetry=info,indexer_example=info,indexer=info,near-performance-metrics=info",\n    );\n    tracing_subscriber::fmt::Subscriber::builder()\n        .with_env_filter(env_filter)\n        .with_writer(std::io::stderr)\n        .init();\n}\n...\n')),(0,o.kt)("p",null,"\uc774\ub97c \uc544\ub798\uc640 \uac19\uc774 \ubcc0\uacbd\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/config.rs",title:"src/config.rs"},'...\npub(crate) fn init_logging() {\n    let env_filter = EnvFilter::new("near_lake_framework=info");\n    tracing_subscriber::fmt::Subscriber::builder()\n        .with_env_filter(env_filter)\n        .with_writer(std::io::stderr)\n        .init();\n}\n...\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"src/config.rs"),"\uc5d0\uc11c \ud560 \uc77c\uc740 \ub05d\ub0ac\uace0, ",(0,o.kt)("inlineCode",{parentName:"p"},"src/main.rs"),"\uc744 \uc218\uc815\ud574 \ubd05\uc2dc\ub2e4."),(0,o.kt)("h2",{id:"\uc778\ub371\uc11c-\uc778\uc2a4\ud134\uc2a4-\uad50\uccb4"},"\uc778\ub371\uc11c \uc778\uc2a4\ud134\uc2a4 \uad50\uccb4"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tokio")," \ub7f0\ud0c0\uc784\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," \ud568\uc218\ub97c \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc791\ub3d9\ud558\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub9ac\ud329\ud1a0\ub9c1 \ud504\ub85c\uc138\uc2a4\ubcf4\ub2e4 ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," \ud568\uc218 \uc7ac\uc0dd\uc131\uc744 \uc704\uc8fc\ub85c \ubcf4\uc5ec\ub4dc\ub9ac\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uac00\uc838\uc624\uae30(import) \uc139\uc158\ubd80\ud130 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4."),(0,o.kt)("h3",{id:"\uc218\uc815-\uc804-import"},"\uc218\uc815 \uc804 Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"use std::str::FromStr;\n\nuse std::collections::{HashMap, HashSet};\n\nuse clap::Clap;\nuse tokio::sync::mpsc;\nuse tracing::info;\n\nuse configs::{init_logging, Opts, SubCommand};\n\nmod configs;\n")),(0,o.kt)("h3",{id:"\uc218\uc815-\ud6c4-import"},"\uc218\uc815 \ud6c4 Import"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"near_lake_framework")," import\ub97c \ucd94\uac00\ud558\uace0, ",(0,o.kt)("inlineCode",{parentName:"p"},"configs"),"\ub85c\ubd80\ud130\uc758 \uc911\ubcf5\ub41c import\ub97c \uc0ad\uc81c\ud558\uc600\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"use std::str::FromStr;\n\nuse std::collections::{HashMap, HashSet};\n\nuse clap::Clap;\nuse tokio::sync::mpsc;\nuse tracing::info;\n\nuse near_lake_framework::near_indexer_primitives;\nuse near_lake_framework::LakeConfig;\n\nuse configs::{init_logging, Opts};\n")),(0,o.kt)("h3",{id:"main-\uc0dd\uc131"},(0,o.kt)("inlineCode",{parentName:"h3"},"main()")," \uc0dd\uc131"),(0,o.kt)("p",null,"\ube44\ub3d9\uae30 ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4, ",(0,o.kt)("inlineCode",{parentName:"p"},"init_logging"),"\uc744 \ud638\ucd9c\ud558\uace0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Opts"),"\ub97c \uc77d\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"#[tokio::main]\nasync fn main() -> Result<(), tokio::io::Error> {\n    init_logging();\n\n    let opts: Opts = Opts::parse();\n\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Opts"),"\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"p"},"LakeConfig"),"\ub97c \uce90\uc2a4\ud305\ud558\uace0, ",(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-lake-framework"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c")," \ub0b4 ",(0,o.kt)("inlineCode",{parentName:"p"},"stream"),"\uc744 \uc778\uc2a4\ud134\uc2a4\ud654\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"#[tokio::main]\nasync fn main() -> Result<(), tokio::io::Error> {\n    init_logging();\n\n    let opts: Opts = Opts::parse();\n\n    let config: LakeConfig = opts.clone().into();\n\n    let (_, stream) = near_lake_framework::streamer(config);\n\n")),(0,o.kt)("p",null,"\uc774\uc804 ",(0,o.kt)("inlineCode",{parentName:"p"},"main()"),"\uc73c\ub85c\ubd80\ud130 ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," \uc778\uc790\ub97c \uc77d\ub294 \ucf54\ub4dc\ub97c ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec<AccountId>"),"\ub85c \ubcf5\uc0ac/\ubd99\uc5ec\ub123\uae30\ud558\uc138\uc694."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"#[tokio::main]\nasync fn main() -> Result<(), tokio::io::Error> {\n    init_logging();\n\n    let opts: Opts = Opts::parse();\n\n    let config: LakeConfig = opts.clone().into();\n\n    let (_, stream) = near_lake_framework::streamer(config);\n\n    let watching_list = opts\n        .accounts\n        .split(',')\n        .map(|elem| {\n            near_indexer_primitives::types::AccountId::from_str(elem).expect(\"AccountId is invalid\")\n        })\n        .collect();\n")),(0,o.kt)("p",null,"\uc774\uc81c ",(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-indexer-framework"},"NEAR \uc778\ub371\uc11c \ud504\ub808\uc784\uc6cc\ud06c")," \ub0b4 \uad6c\ucd95\ub418\uc5c8\ub358 \uc778\ub371\uc11c\uc5d0\uc11c \uc774\uc804\uc5d0 \uc0ac\uc6a9\ud588\ub358 ",(0,o.kt)("inlineCode",{parentName:"p"},"listen_blocks")," \ud568\uc218\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," \ud568\uc218\uac00 \ud589\ubcf5\ud560 \uc218 \uc788\ub3c4\ub85d ",(0,o.kt)("inlineCode",{parentName:"p"},"Ok(())"),"\ub97c \ubc18\ud658\ud558\uc138\uc694."),(0,o.kt)("h3",{id:"near-lake-\ud504\ub808\uc784\uc6cc\ud06c-\uc2a4\ud2b8\ub9bc-\ubc0f-\ucd5c\uc885-main-\ud568\uc218"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c \uc2a4\ud2b8\ub9bc \ubc0f \ucd5c\uc885 main \ud568\uc218"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"#[tokio::main]\nasync fn main() -> Result<(), tokio::io::Error> {\n    init_logging();\n\n    let opts: Opts = Opts::parse();\n\n    let config: LakeConfig = opts.clone().into();\n\n    let (_, stream) = near_lake_framework::streamer(config);\n\n    let watching_list = opts\n        .accounts\n        .split(',')\n        .map(|elem| {\n            near_indexer_primitives::types::AccountId::from_str(elem).expect(\"AccountId is invalid\")\n        })\n        .collect();\n\n    listen_blocks(stream, watching_list).await;\n\n    Ok(())\n}\n")),(0,o.kt)("p",null,"\uc774\uc81c \ub05d\ub0ac\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uac70\uc758 \uc644\uc804\ud55c ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," \ud568\uc218\uc785\ub2c8\ub2e4. \uc774\uc804 \ud568\uc218\ub294 \uc0ad\uc81c\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"\uc790\ub8cc\ud615-\uad00\ub828-\ud568\uc218-\ub0b4-\ubcc0\uacbd-\uc0ac\ud56d"},"\uc790\ub8cc\ud615 \uad00\ub828 \ud568\uc218 \ub0b4 \ubcc0\uacbd \uc0ac\ud56d"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-lake-framework"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c \ucd9c\uc2dc"),"\uc640 \ud568\uaed8, \uc778\ub371\uc11c\uc6a9\uc73c\ub85c \uc0dd\uc131\ub41c \uad6c\uc870\ub97c \ubcc4\ub3c4\uc758 \ud06c\ub808\uc774\ud2b8\ub85c \ucd94\ucd9c\ud588\uc2b5\ub2c8\ub2e4. \uc774\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"nearcore")," \ub0b4 \uc758\uc874\uc131\uc744 \ud53c\ud558\uae30 \uc704\ud574 \uc218\ud589\ub418\uc5c8\ub294\ub370, \uc774\uc81c ",(0,o.kt)("a",{parentName:"p",href:"https://crates.io/crates/near-indexer-primitives"},"crates.io\uc5d0 \uc774\ubbf8 \uac8c\uc2dc\ub41c")," \ubcc4\ub3c4\uc758 \ud06c\ub808\uc774\ud2b8 \ub610\ub294 \ud574\ub2f9 \ud06c\ub808\uc774\ud2b8\ub97c \ub178\ucd9c\ud558\ub294 NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\uc5d0 \uc758\uc874\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4."),(0,o.kt)("h3",{id:"listen_blocks"},(0,o.kt)("inlineCode",{parentName:"h3"},"listen_blocks")),(0,o.kt)("p",null,"\uc790\ub8cc\ud615\uc758 \uc0c8 \uc704\uce58\ub97c \uac00\ub9ac\ud0a4\ub3c4\ub85d \ud568\uc218 \uc11c\uba85\uc744 \ubcc0\uacbd\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"async fn listen_blocks(\n    mut stream: mpsc::Receiver<near_indexer::StreamerMessage>,\n    watching_list: Vec<near_indexer::near_primitives::types::AccountId>,\n ) {\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"async fn listen_blocks(\n    mut stream: mpsc::Receiver<near_indexer_primitives::StreamerMessage>,\n    watching_list: Vec<near_indexer_primitives::types::AccountId>,\n ) {\n")),(0,o.kt)("p",null,"\ub2e4\uc74c\uc740 ",(0,o.kt)("inlineCode",{parentName:"p"},"near_indexer::near_primitives"),"\uac00 ",(0,o.kt)("inlineCode",{parentName:"p"},"near_indexer_primitives"),"\ub85c \uad50\uccb4\ub418\uc5b4\uc57c \ud558\ub294 \uc138 \uac00\uc9c0 \uc704\uce58\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"\nif let near_indexer_primitives::views::ReceiptEnumView::Action {\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"if let near_indexer_primitives::views::ReceiptEnumView::Action {\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"if let near_indexer_primitives::views::ActionView::FunctionCall {\n")),(0,o.kt)("h2",{id:"is_tx_receiver_watched"},(0,o.kt)("inlineCode",{parentName:"h2"},"is_tx_receiver_watched()")),(0,o.kt)("p",null,"\uadf8\ub9ac\uace0 \ud568\uc218 ",(0,o.kt)("inlineCode",{parentName:"p"},"is_tx_receiver_watched()"),"\uc758 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \ucd5c\uc885 \ubcc0\uacbd \uc0ac\ud56d\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/main.rs",title:"src/main.rs"},"fn is_tx_receiver_watched(\n    tx: &near_indexer_primitives::IndexerTransactionWithOutcome,\n    watching_list: &[near_indexer_primitives::types::AccountId],\n) -> bool {\n    watching_list.contains(&tx.transaction.receiver_id)\n}\n")),(0,o.kt)("h2",{id:"\uc790\uaca9-\uc99d\uba85"},"\uc790\uaca9 \uc99d\uba85"),(0,o.kt)("p",null,"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c \ub370\uc774\ud130\uc5d0 \uc561\uc138\uc2a4\ud558\ub824\uba74 ",(0,o.kt)("a",{parentName:"p",href:"/near_docs/vi/tutorials/indexer/credentials"},"\uc790\uaca9 \uc99d\uba85\uc744 \uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4"),"."),(0,o.kt)("h2",{id:"\uacb0\ub860"},"\uacb0\ub860"),(0,o.kt)("p",null,"\uc774\uc81c ",(0,o.kt)("a",{parentName:"p",href:"https://near-indexers.io/docs/projects/near-lake-framework"},"NEAR Lake \ud504\ub808\uc784\uc6cc\ud06c")," \uc778\ub371\uc11c\ub85c \uc644\uc804\ud788 \ub9c8\uc774\uadf8\ub808\uc774\uc158\ub418\uc5c8\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\ucc38\uc870\uc6a9\uc73c\ub85c, \ubc11\uc5d0 \uc804\uccb4 diff\ub97c \uac8c\uc2dc\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"diffs"},"Diffs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=Cargo.toml",title:"Cargo.toml"},'--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -2,18 +2,18 @@\n name = "indexer-tx-watcher-example"\n version = "0.1.0"\n authors = ["Near Inc <hello@nearprotocol.com>"]\n-edition = "2018"\n+edition = "2021"\n\n [dependencies]\n-actix = "=0.11.0-beta.2"\n-actix-rt = "=2.2.0"  # remove it once actix is upgraded to 0.11+\n base64 = "0.11"\n-clap = "3.0.0-beta.1"\n-openssl-probe = { version = "0.1.2" }\n+clap = { version = "3.1.6", features = ["derive"] }\n+futures = "0.3.5"\n serde = { version = "1", features = ["derive"] }\n serde_json = "1.0.55"\n-tokio = { version = "1.1", features = ["sync"] }\n+itertools = "0.9.0"\n+tokio = { version = "1.1", features = ["sync", "time", "macros", "rt-multi-thread"] }\n+tokio-stream = { version = "0.1" }\n tracing = "0.1.13"\n tracing-subscriber = "0.2.4"\n\n-near-indexer = { git = "https://github.com/near/nearcore", rev = "25b000ae4dd9fe784695d07a3f2e99d82a6f10bd" }\n+near-lake-framework = "0.4.0"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=src/configs.rs",title:"src/configs.rs"},'--- a/src/configs.rs\n+++ b/src/configs.rs\n@@ -1,99 +1,50 @@\n-use clap::Clap;\n+use clap::Parser;\n\n use tracing_subscriber::EnvFilter;\n\n /// NEAR Indexer Example\n /// Watches for stream of blocks from the chain\n-#[derive(Clap, Debug)]\n+#[derive(Parser, Debug, Clone)]\n #[clap(version = "0.1", author = "Near Inc. <hello@nearprotocol.com>")]\n pub(crate) struct Opts {\n-    /// Sets a custom config dir. Defaults to ~/.near/\n-    #[clap(short, long)]\n-    pub home_dir: Option<std::path::PathBuf>,\n-    #[clap(subcommand)]\n-    pub subcmd: SubCommand,\n-}\n-\n-#[derive(Clap, Debug)]\n-pub(crate) enum SubCommand {\n-    /// Run NEAR Indexer Example. Start observe the network\n-    Run(RunArgs),\n-    /// Initialize necessary configs\n-    Init(InitConfigArgs),\n-}\n-\n-#[derive(Clap, Debug)]\n-pub(crate) struct RunArgs {\n+    /// block height to start indexing from\n+    #[clap(long)]\n+    pub block_height: u64,\n     /// account ids to watch for\n     #[clap(long)]\n     pub accounts: String,\n+    #[clap(subcommand)]\n+    pub subcmd: SubCommand,\n }\n\n-#[derive(Clap, Debug)]\n-pub(crate) struct InitConfigArgs {\n-    /// chain/network id (localnet, testnet, devnet, betanet)\n-    #[clap(short, long)]\n-    pub chain_id: Option<String>,\n-    /// Account ID for the validator key\n-    #[clap(long)]\n-    pub account_id: Option<String>,\n-    /// Specify private key generated from seed (TESTING ONLY)\n-    #[clap(long)]\n-    pub test_seed: Option<String>,\n-    /// Number of shards to initialize the chain with\n-    #[clap(short, long, default_value = "1")]\n-    pub num_shards: u64,\n-    /// Makes block production fast (TESTING ONLY)\n-    #[clap(short, long)]\n-    pub fast: bool,\n-    /// Genesis file to use when initialize testnet (including downloading)\n-    #[clap(short, long)]\n-    pub genesis: Option<String>,\n-    /// Download the verified NEAR genesis file automatically.\n-    #[clap(long)]\n-    pub download_genesis: bool,\n-    /// Specify a custom download URL for the genesis file.\n-    #[clap(long)]\n-    pub download_genesis_url: Option<String>,\n-    /// Download the verified NEAR config file automtically.\n-    #[clap(long)]\n-    pub download_config: bool,\n-    /// Specify a custom download URL for the config file.\n-    #[clap(long)]\n-    pub download_config_url: Option<String>,\n-    /// Specify the boot nodes to bootstrap the network\n-    #[clap(long)]\n-    pub boot_nodes: Option<String>,\n-    /// Specify a custom max_gas_burnt_view limit.\n-    #[clap(long)]\n-    pub max_gas_burnt_view: Option<u64>,\n+#[derive(Parser, Debug, Clone)]\n+pub(crate) enum SubCommand {\n+    Mainnet,\n+    Testnet,\n }\n\n pub(crate) fn init_logging() {\n-    let env_filter = EnvFilter::new(\n-        "tokio_reactor=info,near=info,stats=info,telemetry=info,indexer_example=info,indexer=info,near-performance-metrics=info",\n-    );\n+    let env_filter = EnvFilter::new("near_lake_framework=info");\n     tracing_subscriber::fmt::Subscriber::builder()\n         .with_env_filter(env_filter)\n         .with_writer(std::io::stderr)\n         .init();\n }\n\n-impl From<InitConfigArgs> for near_indexer::InitConfigArgs {\n-    fn from(config_args: InitConfigArgs) -> Self {\n-        Self {\n-            chain_id: config_args.chain_id,\n-            account_id: config_args.account_id,\n-            test_seed: config_args.test_seed,\n-            num_shards: config_args.num_shards,\n-            fast: config_args.fast,\n-            genesis: config_args.genesis,\n-            download_genesis: config_args.download_genesis,\n-            download_genesis_url: config_args.download_genesis_url,\n-            download_config: config_args.download_config,\n-            download_config_url: config_args.download_config_url,\n-            boot_nodes: config_args.boot_nodes,\n-            max_gas_burnt_view: config_args.max_gas_burnt_view,\n-        }\n+impl From<Opts> for near_lake_framework::LakeConfig {\n+    fn from(opts: Opts) -> Self {\n+        let mut lake_config =\n+            near_lake_framework::LakeConfigBuilder::default().start_block_height(opts.block_height);\n+\n+        match &opts.subcmd {\n+            SubCommand::Mainnet => {\n+                lake_config = lake_config.mainnet();\n+            }\n+            SubCommand::Testnet => {\n+                lake_config = lake_config.testnet();\n+            }\n+        };\n+\n+        lake_config.build().expect("Failed to build LakeConfig")\n     }\n }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=src/main.rs",title:"src/main.rs"},'--- a/src/main.rs\n+++ b/src/main.rs\n@@ -2,11 +2,14 @@\n\n use std::collections::{HashMap, HashSet};\n\n-use clap::Clap;\n+use clap::Parser;\n use tokio::sync::mpsc;\n use tracing::info;\n\n-use configs::{init_logging, Opts, SubCommand};\n+use near_lake_framework::near_indexer_primitives;\n+use near_lake_framework::LakeConfig;\n+\n+use configs::{init_logging, Opts};\n\n mod configs;\n\n@@ -15,60 +18,34 @@\n /// We want to catch all *successful* transactions sent to one of the accounts from the list.\n /// In the demo we\'ll just look for them and log them but it might and probably should be extended based on your needs.\n\n-fn main() {\n-    // We use it to automatically search the for root certificates to perform HTTPS calls\n-    // (sending telemetry and downloading genesis)\n-    openssl_probe::init_ssl_cert_env_vars();\n+#[tokio::main]\n+async fn main() -> Result<(), tokio::io::Error> {\n     init_logging();\n\n     let opts: Opts = Opts::parse();\n\n-    let home_dir = opts.home_dir.unwrap_or_else(near_indexer::get_default_home);\n+    let config: LakeConfig = opts.clone().into();\n\n-    match opts.subcmd {\n-        SubCommand::Run(args) => {\n-            // Create the Vec of AccountId from the provided ``--accounts`` to pass it to `listen_blocks`\n-            let watching_list = args\n-                .accounts\n-                .split(\',\')\n-                .map(|elem| {\n-                    near_indexer::near_primitives::types::AccountId::from_str(elem)\n-                        .expect("AccountId is invalid")\n-                })\n-                .collect();\n-\n-            // Inform about indexer is being started and what accounts we\'re watching for\n-            eprintln!(\n-                "Starting indexer transaction watcher for accounts: \\n {:#?}",\n-                &args.accounts\n-            );\n-\n-            // Instantiate IndexerConfig with hardcoded parameters\n-            let indexer_config = near_indexer::IndexerConfig {\n-                home_dir,\n-                sync_mode: near_indexer::SyncModeEnum::FromInterruption,\n-                await_for_node_synced: near_indexer::AwaitForNodeSyncedEnum::WaitForFullSync,\n-            };\n+    let (_, stream) = near_lake_framework::streamer(config);\n\n-            // Boilerplate code to start the indexer itself\n-            let sys = actix::System::new();\n-            sys.block_on(async move {\n-                eprintln!("Actix");\n-                let indexer = near_indexer::Indexer::new(indexer_config);\n-                let stream = indexer.streamer();\n-                actix::spawn(listen_blocks(stream, watching_list));\n-            });\n-            sys.run().unwrap();\n-        }\n-        SubCommand::Init(config) => near_indexer::indexer_init_configs(&home_dir, config.into()),\n-    }\n+    let watching_list = opts\n+        .accounts\n+        .split(\',\')\n+        .map(|elem| {\n+            near_indexer_primitives::types::AccountId::from_str(elem).expect("AccountId is invalid")\n+        })\n+        .collect();\n+\n+    listen_blocks(stream, watching_list).await;\n+\n+    Ok(())\n }\n\n /// The main listener function the will be reading the stream of blocks `StreamerMessage`\n /// and perform necessary checks\n async fn listen_blocks(\n-    mut stream: mpsc::Receiver<near_indexer::StreamerMessage>,\n-    watching_list: Vec<near_indexer::near_primitives::types::AccountId>,\n+    mut stream: mpsc::Receiver<near_indexer_primitives::StreamerMessage>,\n+    watching_list: Vec<near_indexer_primitives::types::AccountId>,\n ) {\n     eprintln!("listen_blocks");\n     // This will be a map of correspondence between transactions and receipts\n@@ -120,7 +97,7 @@\n                         &execution_outcome.receipt.receiver_id,\n                         execution_outcome.execution_outcome.outcome.status\n                     );\n-                    if let near_indexer::near_primitives::views::ReceiptEnumView::Action {\n+                    if let near_indexer_primitives::views::ReceiptEnumView::Action {\n                         signer_id,\n                         ..\n                     } = &execution_outcome.receipt.receipt\n@@ -128,19 +105,20 @@\n                         eprintln!("{}", signer_id);\n                     }\n\n-                    if let near_indexer::near_primitives::views::ReceiptEnumView::Action {\n-                        actions,\n-                        ..\n+                    if let near_indexer_primitives::views::ReceiptEnumView::Action {\n+                        actions, ..\n                     } = execution_outcome.receipt.receipt\n                     {\n                         for action in actions.iter() {\n-                            if let near_indexer::near_primitives::views::ActionView::FunctionCall {\n+                            if let near_indexer_primitives::views::ActionView::FunctionCall {\n                                 args,\n                                 ..\n                             } = action\n                             {\n                                 if let Ok(decoded_args) = base64::decode(args) {\n-                                    if let Ok(args_json) = serde_json::from_slice::<serde_json::Value>(&decoded_args) {\n+                                    if let Ok(args_json) =\n+                                        serde_json::from_slice::<serde_json::Value>(&decoded_args)\n+                                    {\n                                         eprintln!("{:#?}", args_json);\n                                     }\n                                 }\n@@ -156,8 +134,8 @@\n }\n\n fn is_tx_receiver_watched(\n-    tx: &near_indexer::IndexerTransactionWithOutcome,\n-    watching_list: &[near_indexer::near_primitives::types::AccountId],\n+    tx: &near_indexer_primitives::IndexerTransactionWithOutcome,\n+    watching_list: &[near_indexer_primitives::types::AccountId],\n ) -> bool {\n     watching_list.contains(&tx.transaction.receiver_id)\n }\n')))}f.isMDXComponent=!0}}]);